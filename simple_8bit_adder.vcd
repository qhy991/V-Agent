$date
	Sat Aug  2 10:36:48 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module simple_8bit_adder_tb $end
$var wire 8 ! sum [7:0] $end
$var wire 1 " cout $end
$var reg 8 # a [7:0] $end
$var reg 8 $ b [7:0] $end
$var reg 1 % cin $end
$scope module uut $end
$var wire 8 & a [7:0] $end
$var wire 8 ' b [7:0] $end
$var wire 1 % cin $end
$var wire 8 ( sum [7:0] $end
$var wire 1 " cout $end
$var wire 8 ) carry [7:0] $end
$scope begin adder_stage[0] $end
$var parameter 2 * i $end
$scope begin genblk1 $end
$scope module fa $end
$var wire 1 + a $end
$var wire 1 , b $end
$var wire 1 % cin $end
$var wire 1 - cout $end
$var wire 1 . sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin adder_stage[1] $end
$var parameter 2 / i $end
$scope begin genblk1 $end
$scope module fa $end
$var wire 1 0 a $end
$var wire 1 1 b $end
$var wire 1 2 cin $end
$var wire 1 3 cout $end
$var wire 1 4 sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin adder_stage[2] $end
$var parameter 3 5 i $end
$scope begin genblk1 $end
$scope module fa $end
$var wire 1 6 a $end
$var wire 1 7 b $end
$var wire 1 8 cin $end
$var wire 1 9 cout $end
$var wire 1 : sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin adder_stage[3] $end
$var parameter 3 ; i $end
$scope begin genblk1 $end
$scope module fa $end
$var wire 1 < a $end
$var wire 1 = b $end
$var wire 1 > cin $end
$var wire 1 ? cout $end
$var wire 1 @ sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin adder_stage[4] $end
$var parameter 4 A i $end
$scope begin genblk1 $end
$scope module fa $end
$var wire 1 B a $end
$var wire 1 C b $end
$var wire 1 D cin $end
$var wire 1 E cout $end
$var wire 1 F sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin adder_stage[5] $end
$var parameter 4 G i $end
$scope begin genblk1 $end
$scope module fa $end
$var wire 1 H a $end
$var wire 1 I b $end
$var wire 1 J cin $end
$var wire 1 K cout $end
$var wire 1 L sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin adder_stage[6] $end
$var parameter 4 M i $end
$scope begin genblk1 $end
$scope module fa $end
$var wire 1 N a $end
$var wire 1 O b $end
$var wire 1 P cin $end
$var wire 1 Q cout $end
$var wire 1 R sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin adder_stage[7] $end
$var parameter 4 S i $end
$scope begin genblk1 $end
$scope module fa $end
$var wire 1 T a $end
$var wire 1 U b $end
$var wire 1 V cin $end
$var wire 1 W cout $end
$var wire 1 X sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b111 S
b110 M
b101 G
b100 A
b11 ;
b10 5
b1 /
b0 *
$end
#0
$dumpvars
0X
0W
0V
0U
0T
0R
0Q
0P
0O
0N
0L
0K
0J
0I
0H
1F
0E
0D
1C
0B
1@
0?
0>
0=
1<
1:
09
08
07
16
14
03
02
01
10
1.
0-
0,
1+
b0 )
b11111 (
b10000 '
b1111 &
0%
b10000 $
b1111 #
0"
b11111 !
$end
#10
1"
1W
1V
1Q
1P
1K
1J
1E
0F
1D
1?
0@
1>
19
0:
18
13
04
12
b11111111 )
b0 !
b0 (
1-
0.
0L
0R
0X
1,
0C
1B
1H
1N
1T
b1 $
b1 '
b11111111 #
b11111111 &
#20
b11111111 !
b11111111 (
14
1:
1@
1F
1L
1R
1X
1.
11
17
1=
1C
1I
1O
1U
1%
b11111111 $
b11111111 '
#30
