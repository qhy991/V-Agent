#!/bin/bash
# Auto-generated build script for Verilog simulation
# Generated by CentralizedAgentFramework ScriptManager

# 设置颜色输出
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# 配置变量
VERILOG_FILES="simple_adder.v"
TESTBENCH_FILES="simple_adder_tb.v"
TARGET="simple_adder_sim"

# 函数定义
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

# 检查文件存在性
check_files() {
    log_info "检查源文件..."
    local missing_files=0
    
    for file in $VERILOG_FILES $TESTBENCH_FILES; do
        if [ -f "$file" ]; then
            log_success "✅ $file"
        else
            log_error "❌ $file (文件不存在)"
            missing_files=$((missing_files + 1))
        fi
    done
    
    if [ $missing_files -gt 0 ]; then
        log_error "发现 $missing_files 个缺失文件，无法继续"
        exit 1
    fi
}

# 编译功能
compile() {
    log_info "🔨 开始编译..."
    
    # 使用iverilog编译
    if iverilog -o "$TARGET" $VERILOG_FILES $TESTBENCH_FILES; then
        log_success "✅ 编译成功: $TARGET"
        return 0
    else
        log_error "❌ 编译失败"
        return 1
    fi
}

# 仿真功能
simulate() {
    log_info "▶️ 开始仿真..."
    
    if [ ! -f "$TARGET" ]; then
        log_error "可执行文件不存在: $TARGET"
        return 1
    fi
    
    # 运行仿真
    if vvp "$TARGET"; then
        log_success "✅ 仿真完成"
        
        # 检查是否生成了VCD文件
        if [ -f "${TARGET}.vcd" ]; then
            log_success "📊 波形文件已生成: ${TARGET}.vcd"
        fi
        
        return 0
    else
        log_error "❌ 仿真失败"
        return 1
    fi
}

# 清理功能
clean() {
    log_info "🧹 清理文件..."
    rm -f "$TARGET" *.vcd *.lxt2
    log_success "✅ 清理完成"
}

# 主逻辑
case "$1" in
    "compile")
        check_files
        compile
        ;;
    "simulate")
        if [ ! -f "$TARGET" ]; then
            log_warning "可执行文件不存在，先进行编译..."
            check_files
            compile || exit 1
        fi
        simulate
        ;;
    "clean")
        clean
        ;;
    "all"|"")
        check_files
        compile || exit 1
        simulate
        ;;
    "help")
        echo "用法: $0 [compile|simulate|clean|all|help]"
        echo "  compile  - 仅编译"
        echo "  simulate - 仅仿真（如需要会先编译）"
        echo "  clean    - 清理生成的文件"
        echo "  all      - 编译并仿真（默认）"
        echo "  help     - 显示帮助信息"
        ;;
    *)
        log_error "未知参数: $1"
        echo "使用 '$0 help' 查看帮助"
        exit 1
        ;;
esac
