# `counter` 模块设计文档

---

## 1. 模块概述

### 功能描述

`counter` 模块是一个**同步计数器**模块，用于在时钟上升沿时根据使能信号（`enable`）递增计数值。当复位信号（`reset`）有效时，计数器清零。

### 设计目标

- 实现一个8位同步递增计数器。
- 支持异步复位（低电平有效）。
- 支持同步使能控制。
- 适用于通用计数、定时、状态控制等场景。

---

## 2. 接口说明

### 端口定义

| 端口名   | 方向   | 类型     | 描述 |
|----------|--------|----------|------|
| `clk`    | 输入   | `wire`   | 主时钟信号，上升沿触发计数操作 |
| `reset`  | 输入   | `wire`   | 异步复位信号，低电平有效，用于将计数器清零 |
| `enable` | 输入   | `wire`   | 同步使能信号，高电平时允许计数器递增 |
| `count`  | 输出   | `reg[7:0]` | 8位计数器输出值 |

---

## 3. 功能规格

### 功能说明

- **复位功能**：
  - 当 `reset` 为低电平时，无论 `enable` 和 `clk` 的状态如何，`count` 被置为 `8'd0`。
  - 复位为异步操作，优先于其他逻辑。

- **计数功能**：
  - 在 `reset` 为高电平的前提下，每当 `clk` 的上升沿到来时：
    - 如果 `enable` 为高，则 `count` 值加1。
    - 如果 `enable` 为低，则 `count` 保持不变。

- **溢出行为**：
  - 当 `count` 达到最大值 `8'hFF`（即255）时，下一次递增将导致其回绕为 `8'd0`。

---

## 4. 设计架构

### 内部结构

该模块采用一个简单的同步逻辑结构，包含以下关键组件：

- **时钟同步控制逻辑**：在 `always @(posedge clk or negedge reset)` 块中实现。
- **异步复位逻辑**：在 `if (!reset)` 分支中处理。
- **使能控制逻辑**：在 `else if (enable)` 分支中判断是否递增计数器。
- **8位寄存器 `count`**：用于存储当前计数值。

### 关键代码片段

```verilog
always @(posedge clk or negedge reset) begin
    if (!reset) begin
        count <= 8'd0;
    end else if (enable) begin
        count <= count + 8'd1;
    end
end
```

---

## 5. 时序要求

### 时钟要求

- 主时钟 `clk` 应为稳定周期信号。
- 推荐频率范围：依据具体应用需求设定，例如 1 MHz ~ 100 MHz。

### 复位信号

- `reset` 是异步低电平有效的复位信号。
- 建议在系统上电时保持 `reset` 为低电平至少一个时钟周期，以确保计数器正确初始化。

### 建立与保持时间

- 所有输入信号（`enable`）应在 `clk` 上升沿前满足建立时间（setup time）和保持时间（hold time）要求。
- 复位信号 `reset` 的异步特性要求其在时钟边沿附近保持稳定，避免亚稳态问题。

---

## 6. 使用说明

### 实例化示例

以下是一个在顶层模块中实例化 `counter` 的示例：

```verilog
module top_module (
    input      sys_clk,
    input      sys_rst_n,
    input      en,
    output reg [7:0] counter_out
);

counter u_counter (
    .clk     (sys_clk),
    .reset   (sys_rst_n),
    .enable  (en),
    .count   (counter_out)
);

endmodule
```

### 注意事项

- `reset` 信号应为低电平有效，确保与系统复位逻辑一致。
- `enable` 信号应在 `clk` 上升沿前稳定，避免毛刺导致计数错误。
- 若需扩展为更大位宽，需修改 `count` 的位宽定义及加法逻辑。

---

## 7. 测试建议

### 测试策略

建议采用以下测试策略验证模块功能：

1. **基本功能测试**：
   - 测试正常计数功能（`enable=1`）。
   - 测试使能关闭时计数保持不变（`enable=0`）。
   - 测试复位功能（`reset=0`）。

2. **边界条件测试**：
   - 测试计数器从 `8'hFF` 回绕到 `8'h00`。
   - 测试复位信号在计数器运行过程中插入。

3. **时序测试**：
   - 测试建立/保持时间是否满足。
   - 测试复位信号与时钟边沿的同步性。

### 验证要点

| 验证项 | 描述 |
|--------|------|
| 复位功能 | `reset=0` 时 `count` 是否清零 |
| 使能控制 | `enable=1` 时是否递增，`enable=0` 时是否保持 |
| 递增逻辑 | 每个时钟周期是否正确递增1 |
| 溢出行为 | 是否从 `8'hFF` 正确回绕到 `8'h00` |
| 异步复位优先级 | 复位是否优先于其他操作 |

### 示例测试平台代码（Testbench）

```verilog
module tb_counter;

reg clk;
reg reset;
reg enable;
wire [7:0] count;

// 实例化被测模块
counter uut (
    .clk(clk),
    .reset(reset),
    .enable(enable),
    .count(count)
);

// 生成时钟
always begin
    #5 clk = ~clk;
end

initial begin
    clk = 0;
    reset = 0;
    enable = 0;

    #10 reset = 1; // 释放复位
    enable = 1;

    #100 enable = 0; // 停止计数
    #50 enable = 1;  // 恢复计数

    #20 reset = 0;   // 插入复位
    #10 reset = 1;

    #100 $finish;
end

endmodule
```

---

## 结语

本设计文档详细描述了 `counter` 模块的功能、接口、设计结构、时序要求、使用方法及测试策略。该模块结构简洁、功能明确，适用于多种同步计数场景，具备良好的可重用性和可扩展性。