# Counter模块设计说明

## 1. 模块概述

`counter` 是一个可配置位宽的同步递增计数器模块，支持加载、使能控制和进位输出功能。该模块适用于需要灵活计数行为的数字系统设计，如地址生成、定时控制和状态机控制等场景。

## 2. 主要特性

- **参数化位宽**：通过 `WIDTH` 参数配置计数器位宽（默认8位）
- **同步复位**：高电平有效的同步复位信号 `rst`
- **计数使能**：`en` 信号控制是否允许递增计数
- **数据加载**：`load` 信号有效时将 `data_in` 加载到计数器
- **优先级机制**：`load` 优先级高于 `en`
- **进位输出**：当计数器从最大值（全1）递增时产生单周期高脉冲 `carry_out`
- **时序安全**：使用非阻塞赋值，避免组合逻辑环路

## 3. 端口定义

| 端口名称 | 方向 | 位宽 | 描述 |
|----------|------|------|------|
| clk | input | 1 | 主时钟信号，上升沿触发 |
| rst | input | 1 | 同步复位信号，高电平有效 |
| en | input | 1 | 计数使能信号，高电平允许递增 |
| load | input | 1 | 加载使能信号，高电平时加载data_in |
| data_in | input | WIDTH | 要加载到计数器的数据输入 |
| count | output | WIDTH | 当前计数值输出 |
| carry_out | output | 1 | 进位输出，单周期脉冲 |

## 4. 参数说明

- `WIDTH`：计数器位宽，默认值为8
  - 计数范围：0 到 2^WIDTH - 1
  - 支持1到32位的通用配置

## 5. 功能描述

### 5.1 操作模式

1. **复位模式**：当 `rst` 为高时，在下一个时钟上升沿将计数器清零
2. **加载模式**：当 `rst` 为低且 `load` 为高时，将 `data_in` 加载到计数器
3. **递增模式**：当 `rst` 和 `load` 均为低且 `en` 为高时，计数器递增1
4. **保持模式**：其他情况下，计数器保持当前值

### 5.2 进位生成逻辑

- 当计数器值为最大值（WIDTH位全1）且处于递增模式时，下一时钟周期：
  - `count` 回绕到0
  - `carry_out` 输出一个时钟周期的高脉冲

## 6. 设计约束

- 所有操作均在 `clk` 上升沿触发
- 使用同步复位，确保时序一致性
- `carry_out` 通过寄存器输出，防止毛刺
- 采用非阻塞赋值（`<=`）确保仿真与综合一致性

## 7. 验证要点

1. 复位功能验证
2. 加载功能验证
3. 递增功能验证
4. 进位输出验证
5. 边界行为验证
6. 优先级验证（load > en）
7. 不同位宽测试

## 8. 应用场景

- 地址计数器
- 定时器/延时器
- 状态机控制器
- 数据流控制
- FIFO读写指针