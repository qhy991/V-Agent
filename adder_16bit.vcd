$date
	Sun Aug  3 15:18:53 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module tb_adder_16bit $end
$var wire 16 ! sum [15:0] $end
$var wire 1 " overflow $end
$var wire 1 # cout $end
$var reg 16 $ a [15:0] $end
$var reg 16 % b [15:0] $end
$var reg 1 & cin $end
$scope module uut $end
$var wire 16 ' a [15:0] $end
$var wire 16 ( b [15:0] $end
$var wire 1 & cin $end
$var wire 1 " overflow $end
$var wire 16 ) sum [15:0] $end
$var wire 16 * internal_sum [15:0] $end
$var wire 1 # cout $end
$var wire 16 + carry_out [15:0] $end
$scope begin fa[1] $end
$var parameter 2 , i $end
$upscope $end
$scope begin fa[2] $end
$var parameter 3 - i $end
$upscope $end
$scope begin fa[3] $end
$var parameter 3 . i $end
$upscope $end
$scope begin fa[4] $end
$var parameter 4 / i $end
$upscope $end
$scope begin fa[5] $end
$var parameter 4 0 i $end
$upscope $end
$scope begin fa[6] $end
$var parameter 4 1 i $end
$upscope $end
$scope begin fa[7] $end
$var parameter 4 2 i $end
$upscope $end
$scope begin fa[8] $end
$var parameter 5 3 i $end
$upscope $end
$scope begin fa[9] $end
$var parameter 5 4 i $end
$upscope $end
$scope begin fa[10] $end
$var parameter 5 5 i $end
$upscope $end
$scope begin fa[11] $end
$var parameter 5 6 i $end
$upscope $end
$scope begin fa[12] $end
$var parameter 5 7 i $end
$upscope $end
$scope begin fa[13] $end
$var parameter 5 8 i $end
$upscope $end
$scope begin fa[14] $end
$var parameter 5 9 i $end
$upscope $end
$scope begin fa[15] $end
$var parameter 5 : i $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b1111 :
b1110 9
b1101 8
b1100 7
b1011 6
b1010 5
b1001 4
b1000 3
b111 2
b110 1
b101 0
b100 /
b11 .
b10 -
b1 ,
$end
#0
$dumpvars
b1011001110000 +
b110100010101100 *
b110100010101100 )
b101011001111000 (
b1001000110100 '
0&
b101011001111000 %
b1001000110100 $
0#
0"
b110100010101100 !
$end
#10
1#
b0 !
b0 )
b0 *
b1000000000000000 +
1"
b1000000000000000 %
b1000000000000000 (
b1000000000000000 $
b1000000000000000 '
#20
b111111111111111 !
b111111111111111 )
b111111111111111 *
b1111111111111111 $
b1111111111111111 '
#30
0"
b1111111111111111 !
b1111111111111111 )
b1111111111111111 *
b1111111111111111 +
1&
b1111111111111111 %
b1111111111111111 (
#40
b1 !
b1 )
b1 *
0#
b0 +
0"
b0 %
b0 (
b0 $
b0 '
#50
