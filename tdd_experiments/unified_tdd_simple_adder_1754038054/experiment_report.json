{
  "experiment_id": "unified_tdd_simple_adder_1754038054",
  "design_type": "simple_adder",
  "config_profile": "standard",
  "success": true,
  "total_duration": 72.21494698524475,
  "timestamp": 1754038127.072372,
  "detailed_result": {
    "success": true,
    "session_id": "tdd_1754038054",
    "total_iterations": 1,
    "final_design": [
      "FileReference(file_path='logs/experiment_20250801_164734/artifacts/adder_8bit.v', file_type='verilog', description='real_verilog_design_agent生成的verilog文件', metadata={'created_at': None, 'size_bytes': None})",
      "FileReference(file_path='logs/experiment_20250801_164734/artifacts/adder_8bit_doc.md', file_type='documentation', description='real_verilog_design_agent生成的documentation文件', metadata={'created_at': None, 'size_bytes': None})"
    ],
    "test_results": {
      "success": true,
      "stage": "simulation",
      "compile_stdout": "",
      "simulation_stdout": "========================================\n🧪 开始8位加法器功能测试\n========================================\n[0] a=00, b=00, cin=0 → sum=00, cout=0\n\\n📋 测试组1: 基本加法功能\n----------------------------------------\n[10000] a=12, b=34, cin=0 → sum=46, cout=0\n✅ PASS -                                                                                                                                                                             : a=12, b=34, cin=0 → sum=46, cout=0\n[15000] a=12, b=34, cin=1 → sum=47, cout=0\n✅ PASS -                                                                                                                                                                                 : a=12, b=34, cin=1 → sum=47, cout=0\n[20000] a=00, b=00, cin=0 → sum=00, cout=0\n✅ PASS -                                                                                                                                                                                             : a=00, b=00, cin=0 → sum=00, cout=0\n[25000] a=00, b=00, cin=1 → sum=01, cout=0\n✅ PASS -                                                                                                                                                                                     : a=00, b=00, cin=1 → sum=01, cout=0\n\\n📋 测试组2: 进位测试\n----------------------------------------\n[30000] a=ff, b=01, cin=0 → sum=00, cout=1\n✅ PASS -                                                                                                                                                                         : a=ff, b=01, cin=0 → sum=00, cout=1\n[35000] a=ff, b=ff, cin=0 → sum=fe, cout=1\n✅ PASS -                                                                                                                                                                                     : a=ff, b=ff, cin=0 → sum=fe, cout=1\n[40000] a=ff, b=ff, cin=1 → sum=ff, cout=1\n✅ PASS -                                                                                                                                                                                         +1: a=ff, b=ff, cin=1 → sum=ff, cout=1\n\\n📋 测试组3: 边界条件测试\n----------------------------------------\n[45000] a=00, b=01, cin=0 → sum=01, cout=0\n✅ PASS -                                                                                                                                                                                             +1: a=00, b=01, cin=0 → sum=01, cout=0\n[50000] a=80, b=7f, cin=0 → sum=ff, cout=0\n✅ PASS -                                                                                                                                                                                             : a=80, b=7f, cin=0 → sum=ff, cout=0\n[55000] a=aa, b=55, cin=0 → sum=ff, cout=0\n✅ PASS -                                                                                                                                                                                         : a=aa, b=55, cin=0 → sum=ff, cout=0\n\\n📋 测试组4: 随机测试\n----------------------------------------\n[60000] a=3a, b=7b, cin=0 → sum=b5, cout=0\n✅ PASS -                                                                                                                                                                                         1: a=3a, b=7b, cin=0 → sum=b5, cout=0\n[65000] a=9f, b=13, cin=1 → sum=b3, cout=0\n✅ PASS -                                                                                                                                                                                         2: a=9f, b=13, cin=1 → sum=b3, cout=0\n[70000] a=45, b=ba, cin=0 → sum=ff, cout=0\n✅ PASS -                                                                                                                                                                                         3: a=45, b=ba, cin=0 → sum=ff, cout=0\n[75000] a=c3, b=2d, cin=1 → sum=f1, cout=0\n✅ PASS -                                                                                                                                                                                         4: a=c3, b=2d, cin=1 → sum=f1, cout=0\n\\n========================================\n🏁 测试完成统计\n========================================\n总测试用例: 14\n通过测试: 14\n失败测试: 0\n🎉 所有测试通过！8位加法器设计正确！\n✨ 功能验证: 8位加法运算正确\n✨ 进位逻辑: 进位处理正常\n✨ 边界处理: 边界条件处理正确\n========================================\n/home/haiyan/Research/CentralizedAgentFramework/test_cases/simple_8bit_adder_tb.v:169: $finish called at 90000 (1ps)\n",
      "simulation_stderr": "",
      "return_code": 0,
      "all_tests_passed": true,
      "test_summary": "✅ 所有测试通过",
      "detailed_analysis": {
        "output_analysis": "发现成功指示器"
      },
      "failure_reasons": [],
      "suggestions": [],
      "testbench_path": "/home/haiyan/Research/CentralizedAgentFramework/test_cases/simple_8bit_adder_tb.v",
      "design_files": [
        "logs/experiment_20250801_164734/artifacts/adder_8bit.v"
      ]
    },
    "completion_reason": "tests_passed"
  },
  "summary": {
    "iterations_used": 1,
    "efficiency": "成功率: 100%",
    "files_generated": 2,
    "completion_reason": "tests_passed",
    "average_iteration_time": 72.21494698524475
  }
}